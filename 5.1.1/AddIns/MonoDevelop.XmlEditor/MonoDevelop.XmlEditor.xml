<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MonoDevelop.XmlEditor</name>
    </assembly>
    <members>
        <member name="T:MonoDevelop.XmlEditor.EncodedStringWriter">
            <summary>
            A string writer that allows you to specify the text encoding to
            be used when generating the string.
            </summary>
            <remarks>
            This class is used when generating xml strings using a writer and
            the encoding in the xml processing instruction needs to be changed.
            The xml encoding string will be the encoding specified in the constructor
            of this class (i.e. UTF-8, UTF-16)</remarks>
        </member>
        <member name="M:MonoDevelop.XmlEditor.EncodedStringWriter.#ctor(System.Text.Encoding)">
            <summary>
            Creates a new string writer that will generate a string with the
            specified encoding.
            </summary>
            <remarks>The encoding will be used when generating the
            xml encoding header (i.e. UTF-8, UTF-16).</remarks>
        </member>
        <member name="P:MonoDevelop.XmlEditor.EncodedStringWriter.Encoding">
            <summary>
            Gets the text encoding that will be used when generating
            the string.
            </summary>
        </member>
        <member name="T:MonoDevelop.XmlEditor.XmlNamespace">
            <summary>
            A namespace Uri and a prefix.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlNamespace.FromString(System.String)">
            <summary>
            Creates an XmlNamespace instance from the given string that is in the
            format returned by ToString.
            </summary>
        </member>
        <member name="T:MonoDevelop.XmlEditor.XmlParser">
            <summary>
            Utility class that contains xml parsing routines used to determine
            the currently selected element so we can provide intellisense.
            </summary>
            <remarks>
            All of the routines return <see cref="T:MonoDevelop.XmlEditor.XmlElementPath" /> objects
            since we are interested in the complete path or tree to the
            currently active element.
            </remarks>
        </member>
        <member name="T:MonoDevelop.XmlEditor.XmlParser.NamespaceURI">
            <summary>
            Helper class.  Holds the namespace URI and the prefix currently
            in use for this namespace.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlParser.GetActiveElementStartPath(System.String,System.Int32)">
            <summary>
            Gets path of the xml element start tag that the specified
            <paramref name="index" /> is currently inside.
            </summary>
            <remarks>If the index outside the start tag then an empty path
            is returned.</remarks>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlParser.GetActiveElementStartPathAtIndex(System.String,System.Int32)">
            <summary>
            Gets path of the xml element start tag that the specified
            <paramref name="index" /> is currently located. This is different to the
            GetActiveElementStartPath method since the index can be inside the element
            name.
            </summary>
            <remarks>If the index outside the start tag then an empty path
            is returned.</remarks>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlParser.GetParentElementPath(System.String)">
            <summary>
            Gets the parent element path based on the index position.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlParser.IsNamespaceDeclaration(System.String,System.Int32)">
            <summary>
            Checks whether the attribute at the end of the string is a
            namespace declaration.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlParser.GetAttributeName(System.String,System.Int32)">
            <summary>
            Gets the name of the attribute inside but before the specified
            index.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlParser.GetAttributeNameAtIndex(System.String,System.Int32)">
            <summary>
            Gets the name of the attribute at the specified index. The index
            can be anywhere inside the attribute name or in the attribute value.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlParser.IsAttributeValueChar(System.Char)">
            <summary>
            Checks for valid xml attribute value character
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlParser.IsXmlNameChar(System.Char)">
            <summary>
            Checks for valid xml element or attribute name character.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlParser.IsInsideAttributeValue(System.String,System.Int32)">
            <summary>
            Determines whether the specified index is inside an attribute value.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlParser.GetAttributeValueAtIndex(System.String,System.Int32)">
            <summary>
            Gets the attribute value at the specified index.
            </summary>
            <returns>An empty string if no attribute value can be found.</returns>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlParser.GetActiveElementStartText(System.String,System.Int32)">
            <summary>
            Gets the text of the xml element start tag that the index is
            currently inside.
            </summary>
            <returns>
            Returns the text up to and including the start tag &lt; character.
            </returns>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlParser.GetActiveElementStartIndex(System.String,System.Int32)">
            <summary>
            Locates the index of the start tag &lt; character.
            </summary>
            <returns>
            Returns the index of the start tag character; otherwise
            -1 if no start tag character is found or a end tag
            &gt; character is found first.
            </returns>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlParser.GetActiveElementEndIndex(System.String,System.Int32)">
            <summary>
            Locates the index of the end tag character.
            </summary>
            <returns>
            Returns the index of the end tag character; otherwise
            -1 if no end tag character is found or a start tag
            character is found first.
            </returns>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlParser.GetElementName(System.String)">
            <summary>
            Gets the element name from the element start tag string.
            </summary>
            <param name="xml">This string must start at the
            element we are interested in.</param>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlParser.GetElementNamespace(System.String)">
            <summary>
            Gets the element namespace from the element start tag
            string.
            </summary>
            <param name="xml">This string must start at the
            element we are interested in.</param>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlParser.GetCorrectedIndex(System.Int32,System.Int32)">
            <summary>
            Ensures that the index is on the last character if it is
            too large.
            </summary>
            <param name="length">The length of the string.</param>
            <param name="index">The current index.</param>
            <returns>The index unchanged if the index is smaller than the
            length of the string; otherwise it returns length - 1.</returns>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlParser.GetActiveElementStartPath(System.String,System.Int32,System.String)">
            <summary>
            Gets the active element path given the element text.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlParser.GetElementNameAtIndex(System.String,System.Int32)">
            <summary>
            Gets the element name at the specified index.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlSchemaManager.GetNamespacePrefixForFileName(System.String)">
            <summary>
            Gets the namespace prefix that is associated with the
            specified file extension.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlSchemaManager.RemoveUserSchema(System.String)">
            <summary>
            Removes the schema with the specified namespace from the
            user schemas folder and removes the completion data.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlSchemaManager.AddUserSchema(MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData)">
            <summary>
            Adds the schema to the user schemas folder and makes the
            schema available to the xml editor.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlSchemaManager.IsXmlSchemaNamespace(System.String)">
            <summary>
            Determines whether the specified namespace is actually the W3C namespace for
            XSD files.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlSchemaManager.LoadSchema(System.Collections.Generic.List{MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData},System.String,System.Boolean)">
            <summary>
            Reads an individual schema and adds it to the collection.
            </summary>
            <remarks>
            If the schema namespace exists in the collection it is not added.
            </remarks>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlEditorService.CreateXmlTextWriter(MonoDevelop.Ide.Gui.Document,System.IO.TextWriter)">
            <summary>
            Creates a XmlTextWriter using the current text editor
            properties for indentation.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlEditorService.Transform(System.String,System.String)">
            <summary>
            Runs an XSL transform on the input xml.
            </summary>
            <param name="input">The input xml to transform.</param>
            <param name="transform">The transform xml.</param>
            <returns>The output of the transform.</returns>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlEditorService.ValidateWellFormedness(MonoDevelop.Core.IProgressMonitor,System.String,System.String)">
            <summary>
            Checks that the xml in this view is well-formed.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlEditorService.ValidateXml(MonoDevelop.Core.IProgressMonitor,System.String,System.String)">
            <summary>
            Validates the xml against known schemas.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlEditorService.ValidateSchema(MonoDevelop.Core.IProgressMonitor,System.String,System.String)">
            <summary>
            Validates the schema.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlEditorService.BrowseForStylesheetFile">
            <summary>Allows the user to browse the file system for a stylesheet.</summary>
            <returns>The stylesheet filename the user selected; otherwise null.</returns>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlEditorService.BrowseForSchemaFile">
            <summary>Allows the user to browse the file system for a schema.</summary>
            <returns>The schema filename the user selected; otherwise null.</returns>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlTextEditorExtension.FindSchema(MonoDevelop.XmlEditor.Completion.IXmlSchemaCompletionDataCollection,MonoDevelop.XmlEditor.XmlElementPath)">
            <summary>
            Finds the schema given the xml element path.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlTextEditorExtension.GetSchemaObjectSelected(MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData)">
            <summary>
            Gets the XmlSchemaObject that defines the currently selected xml element or attribute.
            </summary>
            <param name="currentSchemaCompletionData">This is the schema completion data for the schema currently being
            displayed. This can be null if the document is not a schema.</param>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlTextEditorExtension.GetSchemaObjectReferenced(MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData,System.Xml.Schema.XmlSchemaElement,System.Xml.Schema.XmlSchemaAttribute)">
            <summary>
            If the attribute value found references another item in the schema
            return this instead of the attribute schema object. For example, if the
            user can select the attribute value and the code will work out the schema object pointed to by the ref
            or type attribute:
            xs:element ref="ref-name"
            xs:attribute type="type-name"
            </summary>
            <returns>
            The <paramref name="attribute" /> if no schema object was referenced.
            </returns>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlTextEditorExtension.IsXmlSchemaNamespace(System.Xml.Schema.XmlSchemaElement)">
            <summary>
            Checks whether the element belongs to the XSD namespace.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlTextEditorExtension.FindSchemaObjectReference(System.String,MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData,System.String)">
            <summary>
            Attempts to locate the reference name in the specified schema.
            </summary>
            <param name="name">The reference to look up.</param>
            <param name="schemaCompletionData">The schema completion data to use to
            find the reference.</param>
            <param name="elementName">The element to determine what sort of reference it is
            (e.g. group, attribute, element).</param>
            <returns>
                <see langword="null" /> if no match can be found.</returns>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlTextEditorExtension.FindSchemaObjectType(System.String,MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData,System.String)">
            <summary>
            Attempts to locate the type name in the specified schema.
            </summary>
            <param name="name">The type to look up.</param>
            <param name="schemaCompletionData">The schema completion data to use to
            find the type.</param>
            <param name="elementName">The element to determine what sort of type it is
            (e.g. group, attribute, element).</param>
            <returns>
                <see langword="null" /> if no match can be found.</returns>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlTextEditorExtension.UserSchemaAdded(System.Object,System.EventArgs)">
            Updates the default schema association since the schema may have been added.</member>
        <member name="P:MonoDevelop.XmlEditor.XmlTextEditorExtension.StylesheetFileName">
            <summary>
            Gets or sets the stylesheet associated with this xml file.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlTextEditorExtension.IsFileNameHandled(System.String)">
            <summary>
            Determines whether the file can be displayed by
            the xml editor.
            </summary>
        </member>
        <member name="T:MonoDevelop.XmlEditor.Gui.XmlEditorOptionsPanel">
            <summary>
            Configuration settings for the xml editor.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Gui.XmlSchemasPanelWidget.ScrollToSelection(Gtk.TreeView)">
            <summary>
            Scrolls the list so the specified item is visible.
            </summary>
        </member>
        <member name="T:MonoDevelop.XmlEditor.Gui.XmlSchemasPanel">
            <summary>
            Shows the xml schemas that MonoDevelop knows about.
            </summary>
        </member>
        <member name="T:MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData">
            <summary>
            Holds the completion (intellisense) data for an xml schema.
            </summary>
        </member>
        <member name="F:MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData.prohibitedAttributes">
            <summary>
            Stores attributes that have been prohibited whilst the code
            generates the attribute completion data.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData.#ctor(System.IO.TextReader)">
            <summary>
            Creates completion data from the schema passed in
            via the reader object.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData.#ctor(System.Xml.XmlTextReader)">
            <summary>
            Creates completion data from the schema passed in
            via the reader object.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData.#ctor(System.String)">
            <summary>
            Creates the completion data from the specified schema file.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData.#ctor(System.String,System.String)">
            <summary>
            Creates the completion data from the specified schema file and uses
            the specified baseUri to resolve any referenced schemas.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData.GetUri(System.String)">
            <summary>
            Converts the filename into a valid Uri.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData.GetElementCompletionData">
            <summary>
            Gets the possible root elements for an xml document using this schema.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData.GetElementCompletionData(System.String)">
            <summary>
            Gets the possible root elements for an xml document using this schema.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData.GetAttributeCompletionData(MonoDevelop.XmlEditor.XmlElementPath)">
            <summary>
            Gets the attribute completion data for the xml element that exists
            at the end of the specified path.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData.GetChildElementCompletionData(MonoDevelop.XmlEditor.XmlElementPath)">
            <summary>
            Gets the child element completion data for the xml element that exists
            at the end of the specified path.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData.GetAttributeValueCompletionData(MonoDevelop.XmlEditor.XmlElementPath,System.String)">
            <summary>
            Gets the autocomplete data for the specified attribute value.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData.FindElement(MonoDevelop.XmlEditor.XmlElementPath)">
            <summary>
            Finds the element that exists at the specified path.
            </summary>
            <remarks>This method is not used when generating completion data,
            but is a useful method when locating an element so we can jump
            to its schema definition.</remarks>
            <returns>
                <see langword="null" /> if no element can be found.</returns>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData.FindElement(MonoDevelop.XmlEditor.QualifiedName)">
            <summary>
            Finds an element in the schema.
            </summary>
            <remarks>
            Only looks at the elements that are defined in the
            root of the schema so it will not find any elements
            that are defined inside any complex types.
            </remarks>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData.FindComplexType(MonoDevelop.XmlEditor.QualifiedName)">
            <summary>
            Finds the complex type with the specified name.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData.FindAttribute(System.Xml.Schema.XmlSchemaElement,System.String)">
            <summary>
            Finds the specified attribute name given the element.
            </summary>
            <remarks>This method is not used when generating completion data,
            but is a useful method when locating an attribute so we can jump
            to its schema definition.</remarks>
            <returns>
                <see langword="null" /> if no attribute can be found.</returns>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData.FindAttributeGroup(System.String)">
            <summary>
            Finds the attribute group with the specified name.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData.FindSimpleType(System.String)">
            <summary>
            Finds the simple type with the specified name.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData.FindAttribute(System.String)">
            <summary>
            Finds the specified attribute in the schema. This method only checks
            the attributes defined in the root of the schema.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData.FindGroup(System.String)">
            <summary>
            Finds the schema group with the specified name.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData.CreateQualifiedName(System.String)">
            <summary>
            Takes the name and creates a qualified name using the namespace of this
            schema.
            </summary>
            <remarks>If the name is of the form myprefix:mytype then the correct
            namespace is determined from the prefix. If the name is not of this
            form then no prefix is added.</remarks>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData.SchemaValidation(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            Handler for schema validation errors.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData.ReadSchema(System.Xml.XmlReader)">
            <summary>
            Loads the schema.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData.FindElement(System.Xml.XmlQualifiedName)">
            <summary>
            Finds an element in the schema.
            </summary>
            <remarks>
            Only looks at the elements that are defined in the
            root of the schema so it will not find any elements
            that are defined inside any complex types.
            </remarks>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData.GetElementAsComplexType(System.Xml.Schema.XmlSchemaElement)">
            <summary>
            Converts the element to a complex type if possible.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData.IsProhibitedAttribute(System.Xml.Schema.XmlSchemaAttribute)">
            <summary>
            Checks that the attribute is prohibited or has been flagged
            as prohibited previously.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData.GetAttributeCompletionData(MonoDevelop.XmlEditor.Completion.XmlCompletionDataList,System.Xml.Schema.XmlSchemaAttributeGroupRef)">
            <summary>
            Gets attribute completion data from a group ref.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData.FindChildElement(System.Xml.Schema.XmlSchemaElement,MonoDevelop.XmlEditor.QualifiedName)">
            <summary>
            Finds an element that matches the specified <paramref name="name" />
            from the children of the given <paramref name="element" />.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData.FindChildElement(System.Xml.Schema.XmlSchemaComplexContentExtension,MonoDevelop.XmlEditor.QualifiedName)">
            <summary>
            Finds the named child element contained in the extension element.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData.FindChildElement(System.Xml.Schema.XmlSchemaComplexContentRestriction,MonoDevelop.XmlEditor.QualifiedName)">
            <summary>
            Finds the named child element contained in the restriction element.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData.FindElement(System.Xml.Schema.XmlSchemaObjectCollection,MonoDevelop.XmlEditor.QualifiedName)">
            <summary>
            Finds the element in the collection of schema objects.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData.GetBooleanAttributeValueCompletionData(MonoDevelop.XmlEditor.Completion.XmlCompletionDataList)">
            <summary>
            Gets the set of attribute values for an xs:boolean type.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData.AddSubstitionGroupElements(MonoDevelop.XmlEditor.Completion.XmlCompletionDataList,System.Xml.XmlQualifiedName,System.String)">
            <summary>
            Adds any elements that have the specified substitution group.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlSchemaCompletionData.FindSubstitutionGroupElement(System.Xml.XmlQualifiedName,MonoDevelop.XmlEditor.QualifiedName)">
            <summary>
            Looks for the substitution group element of the specified name.
            </summary>
        </member>
        <member name="T:MonoDevelop.XmlEditor.Completion.XmlCompletionData">
            <summary>
            Holds the text for  namespace, child element or attribute
            autocomplete (intellisense).
            </summary>
        </member>
        <member name="T:MonoDevelop.XmlEditor.Completion.XmlCompletionData.DataType">
            <summary>
            The type of text held in this object.
            </summary>
        </member>
        <member name="P:MonoDevelop.XmlEditor.Completion.XmlCompletionData.Description">
            <summary>
            Returns the xml item's documentation as retrieved from
            the xs:annotation/xs:documentation element.
            </summary>
        </member>
        <member name="T:MonoDevelop.XmlEditor.QualifiedName">
            <summary>
            An <see cref="T:System.Xml.XmlQualifiedName" /> with the namespace prefix.
            </summary>
            <remarks>
            The namespace prefix active for a namespace is
            needed when an element is inserted via autocompletion. This
            class just adds this extra information alongside the
            <see cref="T:System.Xml.XmlQualifiedName" />.
            </remarks>
        </member>
        <member name="M:MonoDevelop.XmlEditor.QualifiedName.Equals(System.Object)">
            <summary>
            A qualified name is considered equal if the namespace and
            name are the same.  The prefix is ignored.
            </summary>
        </member>
        <member name="P:MonoDevelop.XmlEditor.QualifiedName.Namespace">
            <summary>
            Gets the namespace of the qualified name.
            </summary>
        </member>
        <member name="P:MonoDevelop.XmlEditor.QualifiedName.Name">
            <summary>
            Gets the name of the element.
            </summary>
        </member>
        <member name="P:MonoDevelop.XmlEditor.QualifiedName.Prefix">
            <summary>
            Gets the namespace prefix used.
            </summary>
        </member>
        <member name="T:MonoDevelop.XmlEditor.XmlElementPath">
            <summary>
            Represents the path to an xml element starting from the root of the
            document.
            </summary>
        </member>
        <member name="P:MonoDevelop.XmlEditor.XmlElementPath.Elements">
            <summary>
            Gets the elements specifying the path.
            </summary>
            <remarks>The order of the elements determines the path.</remarks>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlElementPath.Compact">
            <summary>
            Compacts the path so it only contains the elements that are from
            the namespace of the last element in the path.
            </summary>
            <remarks>This method is used when we need to know the path for a
            particular namespace and do not care about the complete path.
            </remarks>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlElementPath.Equals(System.Object)">
            <summary>
            An xml element path is considered to be equal if
            each path item has the same name and namespace.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlElementPath.RemoveParentElements(System.Int32)">
            <summary>
            Removes elements up to and including the specified index.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlElementPath.FindNonMatchingParentElement(System.String)">
            <summary>
            Finds the first parent that does belong in the specified
            namespace.
            </summary>
        </member>
        <member name="T:MonoDevelop.XmlEditor.QualifiedNameCollection">
            <summary>
            A collection that stores <see cref="T:MonoDevelop.XmlEditor.QualifiedName" /> objects.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.QualifiedNameCollection.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:MonoDevelop.XmlEditor.QualifiedNameCollection" />.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.QualifiedNameCollection.#ctor(MonoDevelop.XmlEditor.QualifiedNameCollection)">
            <summary>
            Initializes a new instance of <see cref="T:MonoDevelop.XmlEditor.QualifiedNameCollection" /> based on another <see cref="T:MonoDevelop.XmlEditor.QualifiedNameCollection" />.
            </summary>
            <param name="val">
            A <see cref="T:MonoDevelop.XmlEditor.QualifiedNameCollection" /> from which the contents are copied
            </param>
        </member>
        <member name="M:MonoDevelop.XmlEditor.QualifiedNameCollection.#ctor(MonoDevelop.XmlEditor.QualifiedName[])">
            <summary>
            Initializes a new instance of <see cref="T:MonoDevelop.XmlEditor.QualifiedNameCollection" /> containing any array of <see cref="T:MonoDevelop.XmlEditor.QualifiedName" /> objects.
            </summary>
            <param name="val">
            A array of <see cref="T:MonoDevelop.XmlEditor.QualifiedName" /> objects with which to intialize the collection
            </param>
        </member>
        <member name="P:MonoDevelop.XmlEditor.QualifiedNameCollection.Item(System.Int32)">
            <summary>
            Represents the entry at the specified index of the <see cref="T:MonoDevelop.XmlEditor.QualifiedName" />.
            </summary>
            <param name="index">The zero-based index of the entry to locate in the collection.</param>
            <value>The entry at the specified index of the collection.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index" /> is outside the valid range of indexes for the collection.</exception>
        </member>
        <member name="M:MonoDevelop.XmlEditor.QualifiedNameCollection.Add(MonoDevelop.XmlEditor.QualifiedName)">
            <summary>
            Adds a <see cref="T:MonoDevelop.XmlEditor.QualifiedName" /> with the specified value to the
            <see cref="T:MonoDevelop.XmlEditor.QualifiedNameCollection" />.
            </summary>
            <param name="val">The <see cref="T:MonoDevelop.XmlEditor.QualifiedName" /> to add.</param>
            <returns>The index at which the new element was inserted.</returns>
            <seealso cref="M:MonoDevelop.XmlEditor.QualifiedNameCollection.AddRange(MonoDevelop.XmlEditor.QualifiedName[])" />
        </member>
        <member name="M:MonoDevelop.XmlEditor.QualifiedNameCollection.AddRange(MonoDevelop.XmlEditor.QualifiedName[])">
            <summary>
            Copies the elements of an array to the end of the <see cref="T:MonoDevelop.XmlEditor.QualifiedNameCollection" />.
            </summary>
            <param name="val">
            An array of type <see cref="T:MonoDevelop.XmlEditor.QualifiedName" /> containing the objects to add to the collection.
            </param>
            <seealso cref="M:MonoDevelop.XmlEditor.QualifiedNameCollection.Add(MonoDevelop.XmlEditor.QualifiedName)" />
        </member>
        <member name="M:MonoDevelop.XmlEditor.QualifiedNameCollection.AddRange(MonoDevelop.XmlEditor.QualifiedNameCollection)">
            <summary>
            Adds the contents of another <see cref="T:MonoDevelop.XmlEditor.QualifiedNameCollection" /> to the end of the collection.
            </summary>
            <param name="val">
            A <see cref="T:MonoDevelop.XmlEditor.QualifiedNameCollection" /> containing the objects to add to the collection.
            </param>
            <seealso cref="M:MonoDevelop.XmlEditor.QualifiedNameCollection.Add(MonoDevelop.XmlEditor.QualifiedName)" />
        </member>
        <member name="M:MonoDevelop.XmlEditor.QualifiedNameCollection.Contains(MonoDevelop.XmlEditor.QualifiedName)">
            <summary>
            Gets a value indicating whether the
            <see cref="T:MonoDevelop.XmlEditor.QualifiedNameCollection" /> contains the specified <see cref="T:MonoDevelop.XmlEditor.QualifiedName" />.
            </summary>
            <param name="val">The <see cref="T:MonoDevelop.XmlEditor.QualifiedName" /> to locate.</param>
            <returns>
                <see langword="true" /> if the <see cref="T:MonoDevelop.XmlEditor.QualifiedName" /> is contained in the collection;
            otherwise, <see langword="false" />.
            </returns>
            <seealso cref="M:MonoDevelop.XmlEditor.QualifiedNameCollection.IndexOf(MonoDevelop.XmlEditor.QualifiedName)" />
        </member>
        <member name="M:MonoDevelop.XmlEditor.QualifiedNameCollection.CopyTo(MonoDevelop.XmlEditor.QualifiedName[],System.Int32)">
            <summary>
            Copies the <see cref="T:MonoDevelop.XmlEditor.QualifiedNameCollection" /> values to a one-dimensional <see cref="T:System.Array" /> instance at the
            specified index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the values copied from <see cref="T:MonoDevelop.XmlEditor.QualifiedNameCollection" />.</param>
            <param name="index">The index in <paramref name="array" /> where copying begins.</param>
            <exception cref="T:System.ArgumentException">
                <para>
                    <paramref name="array" /> is multidimensional.</para>
                <para>-or-</para>
                <para>The number of elements in the <see cref="T:MonoDevelop.XmlEditor.QualifiedNameCollection" /> is greater than
            the available space between <paramref name="arrayIndex" /> and the end of
            <paramref name="array" />.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="array" /> is <see langword="null" />. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="arrayIndex" /> is less than <paramref name="array" />'s lowbound. </exception>
            <seealso cref="T:System.Array" />
        </member>
        <member name="M:MonoDevelop.XmlEditor.QualifiedNameCollection.IndexOf(MonoDevelop.XmlEditor.QualifiedName)">
            <summary>
            Returns the index of a <see cref="T:MonoDevelop.XmlEditor.QualifiedName" /> in
            the <see cref="T:MonoDevelop.XmlEditor.QualifiedNameCollection" />.
            </summary>
            <param name="val">The <see cref="T:MonoDevelop.XmlEditor.QualifiedName" /> to locate.</param>
            <returns>
            The index of the <see cref="T:MonoDevelop.XmlEditor.QualifiedName" /> of <paramref name="val" /> in the
            <see cref="T:MonoDevelop.XmlEditor.QualifiedNameCollection" />, if found; otherwise, -1.
            </returns>
            <seealso cref="M:MonoDevelop.XmlEditor.QualifiedNameCollection.Contains(MonoDevelop.XmlEditor.QualifiedName)" />
        </member>
        <member name="M:MonoDevelop.XmlEditor.QualifiedNameCollection.Insert(System.Int32,MonoDevelop.XmlEditor.QualifiedName)">
            <summary>
            Inserts a <see cref="T:MonoDevelop.XmlEditor.QualifiedName" /> into the <see cref="T:MonoDevelop.XmlEditor.QualifiedNameCollection" /> at the specified index.
            </summary>
            <param name="index">The zero-based index where <paramref name="val" /> should be inserted.</param>
            <param name="val">The <see cref="T:MonoDevelop.XmlEditor.QualifiedName" /> to insert.</param>
            <seealso cref="M:MonoDevelop.XmlEditor.QualifiedNameCollection.Add(MonoDevelop.XmlEditor.QualifiedName)" />
        </member>
        <member name="M:MonoDevelop.XmlEditor.QualifiedNameCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:MonoDevelop.XmlEditor.QualifiedNameCollection" />.
            </summary>
            <seealso cref="T:System.Collections.IEnumerator" />
        </member>
        <member name="M:MonoDevelop.XmlEditor.QualifiedNameCollection.Remove(MonoDevelop.XmlEditor.QualifiedName)">
            <summary>
            Removes a specific <see cref="T:MonoDevelop.XmlEditor.QualifiedName" /> from the <see cref="T:MonoDevelop.XmlEditor.QualifiedNameCollection" />.
            </summary>
            <param name="val">The <see cref="T:MonoDevelop.XmlEditor.QualifiedName" /> to remove from the <see cref="T:MonoDevelop.XmlEditor.QualifiedNameCollection" />.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="val" /> is not found in the Collection.</exception>
        </member>
        <member name="M:MonoDevelop.XmlEditor.QualifiedNameCollection.RemoveLast">
            <summary>
            Removes the last item in this collection.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.QualifiedNameCollection.RemoveFirst">
            <summary>
            Removes the first item in the collection.
            </summary>
        </member>
        <member name="P:MonoDevelop.XmlEditor.QualifiedNameCollection.LastPrefix">
            <summary>
            Gets the namespace prefix of the last item.
            </summary>
        </member>
        <member name="T:MonoDevelop.XmlEditor.QualifiedNameCollection.QualifiedNameEnumerator">
            <summary>
            Enumerator that can iterate through a QualifiedNameCollection.
            </summary>
            <seealso cref="T:System.Collections.IEnumerator" />
            <seealso cref="T:MonoDevelop.XmlEditor.QualifiedNameCollection" />
            <seealso cref="T:MonoDevelop.XmlEditor.QualifiedName" />
        </member>
        <member name="M:MonoDevelop.XmlEditor.QualifiedNameCollection.QualifiedNameEnumerator.#ctor(MonoDevelop.XmlEditor.QualifiedNameCollection)">
            <summary>
            Initializes a new instance of <see cref="T:MonoDevelop.XmlEditor.QualifiedNameCollection.QualifiedNameEnumerator" />.
            </summary>
        </member>
        <member name="P:MonoDevelop.XmlEditor.QualifiedNameCollection.QualifiedNameEnumerator.Current">
            <summary>
            Gets the current <see cref="T:MonoDevelop.XmlEditor.QualifiedName" /> in the <seealso cref="T:MonoDevelop.XmlEditor.QualifiedNameCollection" />.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.QualifiedNameCollection.QualifiedNameEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next <see cref="T:MonoDevelop.XmlEditor.QualifiedName" /> of the <see cref="T:MonoDevelop.XmlEditor.QualifiedNameCollection" />.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.QualifiedNameCollection.QualifiedNameEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the <see cref="T:MonoDevelop.XmlEditor.QualifiedNameCollection" />.
            </summary>
        </member>
        <member name="M:MonoDevelop.Xml.StateEngine.State.PushChar(System.Char,MonoDevelop.Xml.StateEngine.IParseContext,System.String@)">
            <summary>
            When the <see cref="T:MonoDevelop.Xml.StateEngine.Parser" /> advances by one character, it calls this method
            on the currently active <see cref="T:MonoDevelop.Xml.StateEngine.State" /> to determine the next state.
            </summary>
            <param name="c">The current character.</param>
            <param name="rollback"> If set non-null, the parser will be rolled back that number
            of characters (empty string means replay current char to the next state.
            Note that this will not change the DOM state.</param>
            <returns>
            The next state. A new or parent <see cref="T:MonoDevelop.Xml.StateEngine.State" /> will change the parser state;
            the current state or null will not.
            </returns>
        </member>
        <member name="M:MonoDevelop.Xml.StateEngine.XmlChar.IsValidIANAEncoding(System.String)">
            <summary>
            Returns true if the encoding name is a valid IANA encoding.
            This method does not verify that there is a decoder available
            for this encoding, only that the characters are valid for an
            IANA encoding name.
            </summary>
            <param name="ianaEncoding">The encoding to check.</param>
            <returns>
            </returns>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Gui.BaseXmlEditorExtension.AddMiscBeginTags(MonoDevelop.Ide.CodeCompletion.CompletionDataList)">
            <summary>
            Adds CDATA and comment begin tags.
            </summary>
        </member>
        <member name="T:MonoDevelop.XmlEditor.XmlEditorOptions">
            <summary>
            The Xml Editor options.
            </summary>
        </member>
        <member name="E:MonoDevelop.XmlEditor.XmlEditorOptions.XmlFileAssociationChanged">
            <summary>Raised when any use scheme association changes </summary>
        </member>
        <member name="P:MonoDevelop.XmlEditor.XmlEditorOptions.AutoInsertFragments">
            <summary>
            Automatically insert fragments such as ="" when committing an attribute and &gt; when pressing / in a tag.
            Off by default since it forces the user to alter typing behaviour.
            </summary>
        </member>
        <member name="T:MonoDevelop.XmlEditor.XmlFileAssociation">
            <summary>Represents an file extension that can be handled by the editor.</summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.XmlFileAssociationManager.GetExtensions">
            <summary>File extensions that have XML associations.</summary>
            <returns>LowerInvariant file extensions.</returns>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlCompletionDataList.AddElement(System.String,System.String,System.String)">
            <summary>
            Adds an element completion data to the collection if it does not
            already exist.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlCompletionDataList.AddElement(System.String,System.String,System.Xml.Schema.XmlSchemaAnnotation)">
            <summary>
            Adds an element completion data to the collection if it does not
            already exist.
            </summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlCompletionDataList.GetDocumentation(System.Xml.Schema.XmlSchemaAnnotation)">
            <summary>
            Gets the documentation from the annotation element.
            </summary>
            <remarks>
            All documentation elements are added.  All text nodes inside
            the documentation element are added.
            </remarks>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlNamespacePrefixMap.GetPrefix(System.String)">
            <summary>Gets the prefix registered for the namespace, empty if it's
            the default namespace, or null if it's not registered.</summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlNamespacePrefixMap.GetNamespace(System.String)">
            <summary>Gets the namespace registered for prefix, or default namespace if prefix is empty.</summary>
        </member>
        <member name="M:MonoDevelop.XmlEditor.Completion.XmlNamespacePrefixMap.AddPrefix(System.String,System.String)">
            <summary>Registers a namespace for a prefix, or the default namespace if the prefix is empty.</summary>
        </member>
    </members>
</doc>
